# -*- coding: utf-8 -*-
# This file was *autogenerated* from the file MillerRabin.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import random

def QuickPower(a, n, p):
	tmp = a
	ret = _sage_const_1 
	while (n > _sage_const_0 ) :
		if n & _sage_const_1  == _sage_const_1 :
			ret = (ret * tmp) % p
		tmp = (tmp * tmp) % p
		n >>= _sage_const_1 ;
	return ret

def MillerRabin(x, ran): # calc x-1 = 2^s*t
	tx = x - _sage_const_1 
	# pick out the last '1' in binary tx, which is 2^s
	tx1 = tx
	s2 = _sage_const_1 
	while tx1 & _sage_const_1  == _sage_const_0  :
		tx1 >>= _sage_const_1 
		s2 <<= _sage_const_1 
	r = QuickPower(ran, tx // s2, x)
	if r == _sage_const_1  or r == tx:
		return True
	while s2>_sage_const_1 :
      		r = (r*r)%x
	        if r == _sage_const_1 :
        		return False
	        if r == tx:
	        	return True
	        s2 >>= _sage_const_1 
	return False

def MillerRabin_Test(x, T): # Miller-Rabin Prime Test
	if x < _sage_const_2 :
        	return False
    	if x <= _sage_const_3 :
        	return True
	if x%_sage_const_2  == _sage_const_0  or x%_sage_const_3  == _sage_const_0 :
        	return False
    	for i in range(T): # choose T numbers randomly
        	ran = random.randint(_sage_const_2 , x-_sage_const_2 )
        	if not MillerRabin(x, ran):
            		return False
	return True

if __name__ == '__main__':
	print("/*** Miller-Rabin Prime Test ***/")
	try :
		x = int(input('Test X : '))
		T = int(input('Test Times : '))
		if MillerRabin_Test(x, T) :
			print('This is a Prime')
		else :
			print("This isn't a Prime")
	except:
		print('Error Input !')
