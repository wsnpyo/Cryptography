实验内容： SHA-1（中级）【python3.3环境下编写】

算法步骤：(摘自PPT)

SHA-1处理消息的过程与MD5类似，对输入消息按512位的分组为单位进行处理，整个算法分为五个步骤
步骤1:   增加填充位
    在消息右边增加若干比特，使其长度与448模512同余。即使消息本身已经满足上述长度要求，仍然需要进行填充。填充位数在1到512之间。填充比特的第一位是“1”，其它均为“0”。
步骤2:  附加消息长度值
    用64位表示原始消息x的长度，并将其附加在步骤1所得结果之后。
步骤1与步骤2一起称为消息的预处理
     经预处理后，原消息长度变为512的倍数。设原消息x经预处理后变为消息Y=Y0 Y1… YL?1，其中Yi（i =0,1,…,L?1）是512比特。在后面的步骤中，将对512比特的分组Yi进行处理。
步骤3: 初始化缓冲区 
     SHA-1算法的中间结果和最终结果保存在160位的缓冲区里，缓冲区用5个32位的寄存器表示。5个缓冲区记为A、B、C、D、E，其初始值为下列32位整数（16进制表示）：
             A=67 45 23 01,   B=EF CD AB 89, C=98 BA DC FE , 
             D=10 32 54 76,   E=C3 D2 E1 F0.
     其中，前4个初始值与MD5的初始值相同。SHA?1以大端格式存储缓冲区的值，即字的最高有效字节存于低地址字节位置。因此，上述初始值存储为（十六进制）：
          字A=67 45 23 01,   字B=EF CD AB 89,  字C=98 BA DC FE,
          字D=10 32 54 76,   字E=C3 D2 E1 F0.
步骤4: 以512位的分组（16个字）为单位处理消息,利用迭代Hash函数。
步骤5: 输出 第L个分组处理后的输出值即是消息x的散列值MD(x)


样例输入输出:【数据取自同学】
/******  SHA-1  ******/
PlainText(hex) : 616263
SHA-1 Hash : a9993e364706816aba3e25717850c26c9cd0d89d
