# -*- coding: utf-8 -*-
# This file was *autogenerated* from the file SolovayStassen.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8)
import random

def QuickPower(a, n, p): # calc a^n mod p
	tmp = a
	ret = _sage_const_1 
	while (n > _sage_const_0 ) :
		if (n & _sage_const_1 ):
			ret = (ret * tmp) % p;
		tmp = (tmp * tmp) % p;
		n >>= _sage_const_1 ;
	return ret

def Jacobi(n, m) : # calc Jacobi(n / m)
	n = n % m
	if n == _sage_const_0 :
		return _sage_const_0 
	Jacobi2 = _sage_const_1 
	if not (n & _sage_const_1 ): # if n is even, calc Jacobi2 = Jacobi(2/m)^s where n = 2^s*t(t is odd)
		k = (-_sage_const_1 )**(((m*m - _sage_const_1 )//_sage_const_8 )&_sage_const_1 )
		while not (n & _sage_const_1 ):
			Jacobi2 *= k
			n >>= _sage_const_1 
	if n == _sage_const_1 :
		return Jacobi2
	return Jacobi2 * (-_sage_const_1 ) ** (((m-_sage_const_1 )//_sage_const_2  * (n-_sage_const_1 )//_sage_const_2 ) &_sage_const_1 ) * Jacobi(m % n, n)

def Solovay_Stassen(x, T) : # Solovay_Stassen test
	if x < _sage_const_2  :
		return False
	if x <= _sage_const_3  :
		return True
	if x % _sage_const_2  == _sage_const_0  or x % _sage_const_3  == _sage_const_0  :
		return False
	for i in range(T) :
		tmp = random.randint(_sage_const_2 , x-_sage_const_2 )
		r = QuickPower(tmp, (x-_sage_const_1 )//_sage_const_2 , x)
		if r != _sage_const_1  and r != x-_sage_const_1  :
			return False
		if r == x-_sage_const_1  :
			r = -_sage_const_1 
		if r != Jacobi(tmp, x):
			return False
	return True

if __name__ == '__main__' :
	print('/*** Solovay_Stassen Prime Test ***/')
	try:
		x = int(input('Test for x : '))
		T = int(input('Test Times : '))
		if Solovay_Stassen(x, T) :
			print('This is a prime')
		else :
			print("This isn't a prime")
	except:
		print('Error Input')
