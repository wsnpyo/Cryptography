sage用的是最新版的, 其中夹杂了python2/3的语法.
不好意思, 助教, 这两周课业较重, 因此其中部分实现代码中没有判断输入合法性, 因此代码的输入得符合输入要求才能正确输出. 

实验报告:

/************** 2.22 caesar算法 *****************/

算法原理:
	利用C = E([a,b], p) = (a*p + b) (mod 26) 对明文加密
	解密时只需 p = a^-1 * (C - b) (mod 26)
算法流程:
	与算法原理接近
	

测试样例及输出结果:(最后一行为输出)

1 加密测试:
/***  Caesar Encrypt  ***/
Choose Encrypt(0) or Decrypt(1)?(0/1) 0
a = 17
b = 14
plaintext (English Words) : abcdefg
ofwnevm

2 解密测试:
/***  Caesar Encrypt  ***/
Choose Encrypt(0) or Decrypt(1)?(0/1) 1
a = 17
b = 14
ciphertext (English Words) :ofwnevm
abcdefg


/************** 2.24 频率攻击 *****************/
取书上的字母排序: 频率表为 ['e', 't', 'a', 'o', 'n', 'r', 'i', 's', 'h', 'd', 'l', 'f', 'c', 'm', 'u', 'g', 'y', 'p', 'w', 'b', 'v', 'k', 'j', 'x', 'q', 'z']

算法原理:
	对其可能性大小, 按照其频率大小排序字母, 按大到小依次对应上述频率表排序, 自然是最高的可能性, 接下来的排序可能性, 以如下方法取其顺序:
	每次取输入文字中的频率大小中前i个字母, 然后对其生成排列, 最后的n-i个字母不变, 获得替换表, 然后再对应上述频率表排序, 如果当前i个字母生成的排列数不足以输出n个, 则再取i+1个字母, 依次累计.

算法流程:
	利用python标准库Counter()获得密文字母频率排列
	利用python标准库itertools()获得前i个字母表产生的生成排列
	利用python标准库maketrans()获得字母替换表, 然后用translate()替换字母
	利用python中dict[]作为hash表防止产生重复的排列

样例输入及其运行结果:
/***  frequency attack  ***/
find n maximum probablity : 10
cipherText : aaaabbbcccdqwerjqrjpojnlz
acbedjlonqprwz ==> etaonrishdlfcm
eeeeaaatttndcofrdfrlsrhim
cabedjlonqprwz ==> etaonrishdlfcm
ttttaaaeeendcofrdfrlsrhim
abcedjlonqprwz ==> etaonrishdlfcm
eeeetttaaandcofrdfrlsrhim
cbaedjlonqprwz ==> etaonrishdlfcm
aaaattteeendcofrdfrlsrhim
bacedjlonqprwz ==> etaonrishdlfcm
tttteeeaaandcofrdfrlsrhim
bcaedjlonqprwz ==> etaonrishdlfcm
aaaaeeetttndcofrdfrlsrhim
acebdjlonqprwz ==> etaonrishdlfcm
eeeeoootttndcafrdfrlsrhim
abecdjlonqprwz ==> etaonrishdlfcm
eeeetttooondcafrdfrlsrhim
aecbdjlonqprwz ==> etaonrishdlfcm
eeeeoooaaandctfrdfrlsrhim
aebcdjlonqprwz ==> etaonrishdlfcm
eeeeaaaooondctfrdfrlsrhim


/*************** 2.26 Hill算法 ****************/

算法原理:
	Hill破译通过对明密文P 和 C
		有 P * K = C
		因此 密匙 K = P^-1 * C
	Hill破译需要用到矩阵的模m求逆, 其中矩阵求逆由于时间关系, 直接调用sage中矩阵求逆函数, 一般实现是高斯消元法求逆, 复杂度O(n^3)

算法流程:
	利用sage中A.inverse()求逆后, 要对其中的分数进行取模处理, 如 a/b = a * (b^-1 mod 26), 最后就可以获得相应的矩阵模n逆矩阵
	特殊处理: 输入明文如果不符合矩阵阶数, 末尾将用'a'补充

注意到: 若矩阵有模26逆, 则矩阵A要可逆并且det(A)与26互质

测试样例及输出结果:
/***  Hill Decipher ***/
N dimemsion Cipher : 2
N plainText:
bd
ef
N cipherText:
ab
cd
cipher : 
[[12, 8], [22, 15]]






心得体会:
	为了简化代码, 学习到了很多python标准库和sage标准库的库函数. 这些函数极大提高了效率. 不过比如矩阵求逆这种比较高级的算法没有得到相应的训练.


